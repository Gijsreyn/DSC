# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     https://schemas.microsoft.com/dsc/2023/07/bundled/resource.manifest.yaml

title: Command-based DSC Resource Manifest
description: >-
  Defines a valid command-based DSC Resource.

type: object
required:
  - manifestVersion
  - type
  - version
  - get
properties:
  manifestVersion:
    title: Manifest Version
    description: >-
      The semver of the DSC Resource manifest schema to validate this manifest
      with.
    $ref: /dsc/2023/07/definitions/semver.yaml
    enums:
      - '1.0'
  type:
    $ref: /dsc/2023/07/definitions/resourceType.yaml
  version:
    title: Resource Semantic Version
    description: >-
      The semantic version (semver) of the DSC Resource. This version
      identifies the DSC Resource, not the version of the application it
      manages.
    $ref: /dsc/2023/07/definitions/semver.yaml
  description:
    title: Resource Description
    description: >-
      A short synopsis of the DSC Resource's purpose.
    # Should this include a maximum length or a pattern that forbids newlines?
    type: string
  tags:
    title: Tags
    description: >-
      An array of short strings used to search for DSC Resources.
    type: array
    items:
      type: string
      pattern: ^\w+$
  get:
    $ref: /dsc/2023/07/resource/manifest.get.yaml
  set:
    $ref: /dsc/2023/07/resource/manifest.set.yaml
  test:
    $ref: /dsc/2023/07/resource/manifest.test.yaml
  validate:
    $ref: /dsc/2023/07/resource/manifest.validate.yaml
  provider:
    # I'm not clear on how this works in practice
    $ref: /dsc/2023/07/resource/manifest.provider.yaml
  exitCodes:
    # This setting in the root of the schema implies exit codes must have the
    # same meaning across all executions. What about implementations that
    # support multiple executables? Should exitCodes be a key that exists on
    # command/method objects too?
    title: Exit Codes
    description: >-
      This property defines a map of valid exit codes for the DSC Resource.
      DSC always interprets exit code `0` as a successful operation and any
      other exit code as an error. Use this property to indicate human-readable
      semantic meanings for the DSC Resource's exit codes.
    type: object
    propertyNames:
      pattern: "^[0-9]+$"
    patternProperties:
      "^[0-9]+$":
        type: string
    examples:
      - exitCodes:
          "0": Success
          "1": Invalid parameter
          "2": Invalid input
          "3": Registry error
          "4": JSON serialization failed
  schema:
    $ref: /dsc/2023/07/resource/manifest.schema.yaml

$defs:
  https://schemas.microsoft.com/dsc/2023/07/definitions/commandArgs.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/definitions/commandArgs.yaml
    title: Executable Command Arguments
    description: >-
      The list of arguments to pass to the command.
    type: array
    items:
      type: string

  https://schemas.microsoft.com/dsc/2023/07/definitions/commandExecutable.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/definitions/commandExecutable.yaml
    title: Executable Command Name
    description: >-
      The name of the command to run.
    type: string

  https://schemas.microsoft.com/dsc/2023/07/definitions/inputKind.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/definitions/inputKind.yaml
    title: Executable Command Input Type
    description: >-
      Defines how DSC should pass input to the command, either as arguments or
      JSON over stdin.
    type: string
    enum:
      - args
      - stdin
    default: args

  https://schemas.microsoft.com/dsc/2023/07/definitions/resourceType.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id: https://schemas.microsoft.com/dsc/2023/07/definitions/resourceType.yaml
    title: DSC Resource fully qualified type name
    description: |
      The namespaced name of the DSC Resource, using the syntax:

      <owner>[.<group>][.<area>]/<name>

      For example:

        - Microsoft.SqlServer/Database
        - Microsoft.SqlServer.Database/User
    type: string
    pattern: ^\w+(\.\w+){0,2}\/\w+$

  https://schemas.microsoft.com/dsc/2023/07/definitions/returnKind.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/definitions/returnKind.yaml
    title: Return Kind
    type: string
    enum:
      - state
      - stateAndDiff
    default: state

  https://schemas.microsoft.com/dsc/2023/07/definitions/semver.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/definitions/semver.yaml
    type: string
    title: Semantic Version
    description: >-
      A valid semantic version (semver) string. For reference, see https://semver.org/
    pattern: >-
      ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.get.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/resource/manifest.get.yaml
    title: Get Method
    description: >-
      Defines how DSC must call the DSC Resource to get the current state of an
      instance.
    type: object
    required:
      - executable
    properties:
      executable:
        $ref: /dsc/2023/07/definitions/commandExecutable.yaml
      args:
        $ref: /dsc/2023/07/definitions/commandArgs.yaml
      input:
        $ref: /dsc/2023/07/definitions/inputKind.yaml

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.provider.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/resource/manifest.provider.yaml
    title: Provider
    description: >-
      Defines the DSC Resource as a DSC Resource Provider. A DSC Resource Provider
      enables users to manage resources that don't have their own manifests with
      DSC.
    type: object
    required:
      - list
      - config
    properties:
      list:
        title: List Command
        description: >-
          Defines how DSC must call the DSC Resource Provider to list its supported
          DSC Resources.
        type: object
        required:
          - executable
        properties:
          executable:
            $ref: /dsc/2023/07/definitions/commandExecutable.yaml
          args:
            $ref: /dsc/2023/07/definitions/commandArgs.yaml
      config:
        title: Expected Configuration
        description: >-
          Defines whether the provider expects to receive a full and unprocessed
          configuration as a single JSON blob over stdin or a sequence of JSON
          Lines for each child resource's configurations.
        type: string
        enum:
          - full
          - sequence

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.schema.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id: https://schemas.microsoft.com/dsc/2023/07/resource/manifest.schema.yaml
    title: Instance Schema
    description: >-
      Defines how DSC must validate a JSON blob representing an instance of the
      DSC Resource.
    type: object
    oneOf:
      - required: [command]
      - required: [embedded]
    properties:
      command:
        title: Instance Schema Command
        description: >-
          Defines how DSC must call the DSC Resource to get the JSON Schema for
          validating a JSON blob representing an instance of the DSC Resource.
        type: object
        required:
          - executable
        properties:
          executable:
            $ref: /dsc/2023/07/definitions/commandExecutable.yaml
          args:
            $ref: /dsc/2023/07/definitions/commandArgs.yaml
      embedded:
        title: Embedded Instance Schema
        description: >-
          Defines the JSON Schema DSC must use to validate a JSON blob
          representing an instance of the DSC Resource.
        type: object
        minProperties: 1
      url:
        title: Instance Schema URL
        description: >-
          Defines the URL to the DSC Resource's JSON schema for integrating tools.
        type: string
        format: uri

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.set.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/resource/manifest.set.yaml
    title: Set Method
    description: >-
      Defines how DSC must call the DSC Resource to set the desired state of
      an instance and how to process the output from the DSC Resource.
    type: object
    required:
      - executable
      - input
    properties:
      executable:
        $ref: /dsc/2023/07/definitions/commandExecutable.yaml
      args:
        $ref: /dsc/2023/07/definitions/commandArgs.yaml
      input:
        $ref: /dsc/2023/07/definitions/inputKind.yaml
      preTest:
        title: Resource Performs Pre-Test
        description: >-
          Defines whether the DSC Resource performs its own test to ensure
          idempotency when calling the `set` command. Set this value to `true`
          if the DSC Resource tests input before modifying system state.
        type: boolean
        default: false
      return:
        description: >-
          Defines whether the command returns a JSON blob of the DSC Resource's
          state after the set operation or the state and an array of the
          properties the DSC Resource modified.
        $ref: /dsc/2023/07/definitions/returnKind.yaml

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.test.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/resource/manifest.test.yaml
    title: Test Method
    description: >-
      Defines how DSC must call the DSC Resource to test if an instance is in
      the desired state and how to process the output from the DSC Resource.
    type: object
    required:
      - executable
      - input
    properties:
      executable:
        $ref: /dsc/2023/07/definitions/commandExecutable.yaml
      args:
        $ref: /dsc/2023/07/definitions/commandArgs.yaml
      input:
        $ref: /dsc/2023/07/definitions/inputKind.yaml
      return:
        title: Test Command Return Type
        description: >-
          Defines whether the command returns a JSON blob of the DSC Resource's current state or the
          state and an array of the properties that are out of the desired state.
        $ref: /dsc/2023/07/definitions/returnKind.yaml

  https://schemas.microsoft.com/dsc/2023/07/resource/manifest.validate.yaml:
    $schema: https://json-schema.org/draft/2020-12/schema
    $id:     https://schemas.microsoft.com/dsc/2023/07/resource/manifest.validate.yaml
    title: Validate Method
    description: >-
      Defines how DSC must call the DSC Resource to validate the state of an
      instance. This method is mandatory for DSC Group Resources. It's ignored for
      all other DSC Resources.
    type: object
    required:
      - executable
    properties:
      executable:
        $ref: /dsc/2023/07/definitions/commandExecutable.yaml
      args:
        $ref: /dsc/2023/07/definitions/commandArgs.yaml
