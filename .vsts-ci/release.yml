trigger: none

variables:
  - name: BuildConfiguration
    value: 'Release'
  - name: PackageRoot
    value: '$(System.ArtifactsDirectory)/Packages'
  - group: DSCAPIScan

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance
    ref: master

stages:
- stage: BuildAndSign
  displayName: Build Native Binaries
  dependsOn: []
  jobs:
  - job: BuildWin
    variables:
    - group: ESRP
    pool:
      name: PowerShell1ES
      demands:
      - ImageOverride -equals PSMMS2019-Rust-Secure
    displayName: Windows
    strategy:
      matrix:
        Windows x64:
          buildName: x86_64-pc-windows-msvc
        Windows x64_arm64:
          buildName: aarch64-pc-windows-msvc

    steps:
    - pwsh: |
        rustup default stable
        rustup target add $(buildName)
        Set-Location "$(Build.SourcesDirectory)"
        ./build.ps1 -Release -Architecture $(buildName)
      displayName: 'Build $(buildName)'
      condition: succeeded()
    - pwsh: |
        Set-Location "$(Build.SourcesDirectory)/Package"
        $signSrcPath = "$(Build.SourcesDirectory)/Package/out"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host ("sending " + $vstsCommandString)
        Write-Host "##$vstsCommandString"

        $signOutPath = "$(Build.SourcesDirectory)/Package/signed"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Set path variable for guardian codesign validation
        $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $packageVersion = ./build.ps1 -GetPackageVersion
        $vstsCommandString = "vso[task.setvariable variable=PackageVersion]$packageVersion"
        Write-Host ("sending " + $vstsCommandString)
        Write-Host "##$vstsCommandString"
      displayName: Setup variables for signing

    - publish: "$(Build.SourcesDirectory)/Package/out/"
      artifact: out

      displayName: Publish unsigned files

    - checkout: ComplianceRepo

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signSrcPath)
        # the location to put the signed output
        signOutputPath: $(signOutPath)
        # the certificate ID to use
        certificateId: "CP-230012"
        # The file pattern to use
        # If not using minimatch: comma separated, with * supported
        # If using minimatch: newline separated, with !, **, and * supported.
        # See link in the useMinimatch comments.
        pattern: '*.exe'
        # decides if the task should use minimatch for the pattern matching.
        # https://github.com/isaacs/minimatch#features
        useMinimatch: false

    - template: Sbom.yml@ComplianceRepo
      parameters:
        BuildDropPath: $(Build.SourcesDirectory)/package/signed
        Build_Repository_Uri: 'https://github.com/powershell/DSC'
        PackageName: 'DSC'
        PackageVersion: $(PackageVersion)

    - pwsh: |
        compress-archive -Path "$(Build.SourcesDirectory)/package/signed" -DestinationPath "$(System.ArtifactsDirectory)\Packages\$(buildName).zip"
      displayName: 'Compress $(buildName)'
      condition: succeeded()
    - pwsh: |
        Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(System.ArtifactsDirectory)\Packages\$(buildName).zip"
      displayName: Upload artifacts
      condition: succeeded()

  - job: BuildLinux
    displayName: Linux
    pool:
      name: PowerShell1ES
      demands:
      - ImageOverride -equals PSMMSUbuntu20.04-Secure
    steps:
    - pwsh: |
        rustup default stable
        ./build.ps1 -Release -Architecture x86_64-unknown-linux-gnu
      displayName: 'Build x86_64-unknown-linux-gnu'
      condition: succeeded()
    - pwsh: |
        new-item -itemType Directory -$(System.ArtifactsDirectory)/Packages -Force
        tar czf $(System.ArtifactsDirectory)/Packages/x86_64-unknown-linux-gnu.tar.gz $(Build.SourcesDirectory)/bin/$(BuildConfiguration)/x86_64-unknown-linux-gnu .
      displayName: 'Compress x86_64-unknown-linux-gnu'
      condition: succeeded()
    - pwsh: |
        Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(System.ArtifactsDirectory)\Packages\x86_64-unknown-linux-gnu.zip"
      displayName: Upload artifacts
      condition: succeeded()

  - job: BuildLinuxArm64
    displayName: Linux ARM64
    pool:
      name: ps-powershell-rel-arm
      demands:
      - ImageOverride -equals PSMMSUbuntu20.04-ARM64-secure
    steps:
    - pwsh: |
        rustup default stable
        ./build.ps1 -Release -Architecture aarch64-unknown-linux-gnu
      displayName: 'Build aarch64-unknown-linux-gnu'
      condition: succeeded()
    - pwsh: |
        new-item -itemType Directory -$(System.ArtifactsDirectory)/Packages -Force
        tar czf $(System.ArtifactsDirectory)/Packages/aarch64-unknown-linux-gnu.tar.gz $(Build.SourcesDirectory)/bin/$(BuildConfiguration)/aarch64-unknown-linux-gnu .
      displayName: 'Compress aarch64-unknown-linux-gnu'
      condition: succeeded()
    - pwsh: |
        Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(System.ArtifactsDirectory)\Packages\aarch64-unknown-linux-gnu.zip"
      displayName: Upload artifacts
      condition: succeeded()


  - job: BuildMac
    displayName: Build Native Binaries on macOS
    pool:
      vmImage: macOS-Latest
    strategy:
      matrix:
        macOS x64:
          buildName: x86_64-apple-darwin
        macOS arm64:
          buildName: aarch64-apple-darwin
    steps:
    - pwsh: |
        rustup default stable
        rustup target add $(buildName)
        ./build.ps1 -Release -Architecture $(buildName)
      displayName: 'Build $(buildName)'
      condition: succeeded()
    - pwsh: |
        new-item -itemType Directory -$(System.ArtifactsDirectory)/Packages -Force
        tar czf $(System.ArtifactsDirectory)/Packages/$(buildName).tar.gz $(Build.SourcesDirectory)/bin/$(BuildConfiguration)/$(buildName) .
      displayName: 'Compress $(buildName)'
      condition: succeeded()
    - pwsh: |
        Write-Host "##vso[artifact.upload containerfolder=release;artifactname=release]$(System.ArtifactsDirectory)\Packages\$(buildName).zip"
      displayName: Upload artifacts
      condition: succeeded()

- stage: compliance
  displayName: Compliance
  dependsOn: BuildAndSign
  jobs:
  - job: Compliance_Job
    pool:
      name: PowerShell1ES
      demands:
      - ImageOverride -equals PSMMS2019-Rust-Secure
    steps:
    - checkout: self
      clean: true
    - checkout: ComplianceRepo
      clean: true

    - download: current
      artifact: release

    - download: current
      artifact: signed

    - pwsh: |
        Get-ChildItem -Path 'ENV:'
      displayName: Capture environment

    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)/uncompressed/*.exe'
        AnalyzeSymPath: 'SRV*'
        # component-governance
        sourceScanPath: '$(Build.SourcesDirectory)/DSC'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'DSC'
        # selections
        softwareName: 'DSC'
        softwareNameFolder: '$(Pipeline.Workspace)/uncompressed'
        softwareVersion: '$(PackageVersion)'
        connectionString: RunAs=App;AppId=$(APIScanClient);TenantId=$(APIScanTenant);AppKey=$(APIScanSecret)
        APIScan: true # set to false when not using Windows APIs.
