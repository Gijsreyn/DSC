trigger: none
variables:
  BuildConfiguration: 'release'
  PackageRoot: '$(System.ArtifactsDirectory)/Packages'
  LinuxContainerImage: onebranch.azurecr.io/linux/ubuntu-2004:latest
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2019/vse2022:latest
resources:
  repositories:
  - repository: onebranchTemplates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main
extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates
  parameters:
    customTags: 'ES365AIMigrationTooling'
    stages:
    - stage: BuildAndSign
      displayName: Build Native Binaries
      dependsOn: []
      jobs:
      - job: SetPackageVersion
        displayName: Set PackageVersion
        pool:
          type: windows
        variables:
          repoRoot: $(Build.SourcesDirectory)\DSC
          ob_sdl_tsa_configFile: $(Build.SourcesDirectory)\DSC\.config\tsaoptions.json
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        steps:
        - checkout: self
        - pwsh: |
            $packageVersion = $(repoRoot)/build.ps1 -GetPackageVersion
            $vstsCommandString = "vso[task.setvariable variable=Version;isoutput=true]$packageVersion"
            Write-Host ("sending " + $vstsCommandString)
            Write-Host "##$vstsCommandString"
          name: Package
      - job: BuildWin
        dependsOn: SetPackageVersion
        variables:
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_sdl_tsa_configFile: $(Build.SourcesDirectory)\DSC\.config\tsaoptions.json
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          Codeql.Enabled: true
          Codeql.Language: rust
          Codeql.Cadence: 72
        pool:
          type: windows
        displayName: Build
        strategy:
          matrix:
            Windows x64:
              buildName: x86_64-pc-windows-msvc
            Windows x64_arm64:
              buildName: aarch64-pc-windows-msvc
        steps:
        - checkout: self
        - pwsh: |
            $tmpdir = Join-Path ([System.IO.Path]::GetTempPath()) ([System.Guid]::NewGuid())
            New-Item -ItemType Directory -Path $tmpdir
            Write-Host "##vso[task.setvariable variable=CARGO_TARGET_DIR;]$tmpdir"
          displayName: üõ†Ô∏è Workaround for the LoadLibrary ACCESS_VIOLATION OneBranch issue
        - pwsh: |
            Set-Location "$(Build.SourcesDirectory)/DSC"
            ./build.ps1 -Release -Architecture $(buildName) -SkipLinkCheck
          displayName: 'Build $(buildName)'
          condition: succeeded()
        - pwsh: |
            $null = New-Item -ItemType Directory -Path "$(PackageRoot)" -ErrorAction Ignore
            $null = New-Item -ItemType Directory -Path "$(PackageRoot)/out" -ErrorAction Ignore
            $outPath = New-Item -ItemType Directory -Path "$(PackageRoot)/out/$(buildName)" -ErrorAction Ignore
            # workaround known issue of building in OneBranch copying from TMP folder
            $null = New-Item -ItemType Directory -Path "$(Build.SourcesDirectory)/DSC/bin" -ErrorAction Ignore
            Copy-Item -Recurse -Force $env:CARGO_TARGET_DIR "$(Build.SourcesDirectory)/DSC/bin"
            # Copy-Item -Path "$(Build.SourcesDirectory)/DSC/bin/$(buildName)/$(BuildConfiguration)/*" -Destination $outPath -Verbose -Force
          displayName: Copy binaries
          condition: succeeded()
        - pwsh: |
            Set-Location "$(PackageRoot)"
            $signSrcPath = "$(PackageRoot)/out/$(buildName)"
            # Set signing src path variable
            $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
            Write-Host ("sending " + $vstsCommandString)
            Write-Host "##$vstsCommandString"
        - pwsh: |
            $signOutPath = "$(PackageRoot)/signed"
            $null = New-Item -ItemType Directory -Path $signOutPath
            # Set signing out path variable
            $vstsCommandString = "vso[task.setvariable variable=signOutPath;isoutput=true]${signOutPath}"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"
          name: signOutPath
        - pwsh: |
            # Set path variable for guardian codesign validation
            $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]$(signOutPath.signOutPath)"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"
          displayName: Setup variables for signing
        - pwsh: |
            compress-archive -Path "$(signOutPath.signOutPath)/*" -DestinationPath "$(ob_outputDirectory)/DSC-$(PackageVersion)-$(buildName).zip"
          displayName: 'Compress $(buildName)'
          condition: succeeded()
      - job: PublishSigned
        dependsOn: BuildWin
        variables:
          signOutPath: $[ dependencies.BuildWin.outputs['signOutPath.signOutPath'] ]
          ob_sdl_tsa_configFile: $(Build.SourcesDirectory)\DSC\.config\tsaoptions.json
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        pool:
          type: windows
        steps:
        - task: CopyFiles@2
          displayName: "Copy Files for 'PublishPipelineArtifact@1' publish task"
          inputs:
            SourceFolder: $(signOutPath)
            Contents: '**'
            TargetFolder: $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/signed
      - job: BuildLinux
        dependsOn: SetPackageVersion
        variables:
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          LinuxContainerImage: 'mcr.microsoft.com/onebranch/cbl-mariner/build:2.0'
        displayName: Linux-x64-gnu
        pool:
          type: linux
        steps:
        - pwsh: |
            ./build.ps1 -Release -Architecture x86_64-unknown-linux-gnu
          displayName: 'Build x86_64-unknown-linux-gnu'
          condition: succeeded()
        - pwsh: |
            tar czf '$(ob_outputDirectory)/DSC-$(PackageVersion)-x86_64-unknown-linux-gnu.tar.gz' -C $(Build.SourcesDirectory)/bin/x86_64-unknown-linux-gnu/$(BuildConfiguration) .
          displayName: 'Compress x86_64-unknown-linux-gnu'
          condition: succeeded()
      - job: BuildLinuxArm64
        dependsOn: SetPackageVersion
        variables:
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
          LinuxContainerImage: 'mcr.microsoft.com/onebranch/cbl-mariner/build:2.0'
        displayName: Linux-ARM64-gnu
        pool:
          type: linux
          hostArchitecture: arm64
        steps:
        - pwsh: |
            ./build.ps1 -Release -Architecture aarch64-unknown-linux-gnu
          displayName: 'Build aarch64-unknown-linux-gnu'
          condition: succeeded()
        - pwsh: |
            tar czf '$(ob_outputDirectory)/DSC-$(PackageVersion)-aarch64-unknown-linux-gnu.tar.gz' -C $(Build.SourcesDirectory)/bin/aarch64-unknown-linux-gnu/$(BuildConfiguration) .
          displayName: 'Compress aarch64-unknown-linux-gnu'
          condition: succeeded()
      - job: BuildMac
        dependsOn: SetPackageVersion
        variables:
          PackageVersion: $[ dependencies.SetPackageVersion.outputs['Package.Version'] ]
          ob_outputDirectory: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        displayName: Build
        pool:
          type: linux
          isCustom: true
          name: Azure Pipelines
          vmImage: 'macOS-latest'
        strategy:
          matrix:
            macOS x64:
              buildName: x86_64-apple-darwin
            macOS arm64:
              buildName: aarch64-apple-darwin
        steps:
        - pwsh: |
            ./build.ps1 -Release -Architecture $(buildName)
          displayName: 'Build $(buildName)'
          condition: succeeded()
        - pwsh: |
            tar czf '$(ob_outputDirectory)/DSC-$(PackageVersion)-$(buildName).tar.gz' -C $(Build.SourcesDirectory)/bin/$(buildName)/$(BuildConfiguration) .
          displayName: 'Compress $(buildName)'
          condition: succeeded()
