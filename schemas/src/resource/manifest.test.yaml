# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/resource/manifest.test.yaml

title: Test Method
description: >-
  Defines how DSC must call the DSC Resource to test if an instance is in the desired state and how
  to process the output from the DSC Resource.
markdownDescription: | # VS Code only
  ***
  [_Online Documentation_][01]
  ***

  Defines how DSC must call the DSC Resource to test if an instance is in the desired state and how
  to process the output from the DSC Resource.

  [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/test?<DOCS_VERSION_PIN>


type: object
required:
  - executable
  - input
properties:
  executable:
    $ref: /<PREFIX>/<VERSION>/definitions/commandExecutable.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines the name of the command to run. The value must be the name of a command discoverable
      in the system's `PATH` environment variable or the full path to the command. A file extension
      is only required when the command isn't recognizable by the operating system as an
      executable.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set?<DOCS_VERSION_PIN>#executable
  args:
    $ref: /<PREFIX>/<VERSION>/definitions/commandArgs.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines an array of strings to pass as arguments to the command. DSC passes the arguments to
      the command in the order they're specified.

      For example, the given the following definition:

      ```json
      {
        "executable": "registry",
        "args":       ["config", "test"],
      }
      ```

      DSC invokes the command for the resource as:

      ```bash
      registry config test
      ```

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set?<DOCS_VERSION_PIN>#args
  input:
    $ref: /<PREFIX>/<VERSION>/definitions/inputKind.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines how DSC should pass input to the command, either as environment variables or JSON
      over `stdin`. If this value isn't defined, DSC doesn't send the resource any input when
      invoking the `test` operation.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set?<DOCS_VERSION_PIN>#input
  return:
    title: Test Command Return Type
    description: >-
      Defines whether the command returns a JSON blob of the DSC Resource's current state or the
      state and an array of the properties that are out of the desired state.
    $ref: /<PREFIX>/<VERSION>/definitions/returnKind.yaml
    # VS Code only
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines whether the command returns a JSON blob of the DSC Resource's current state or the
      state and an array of the properties that are out of the desired state.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/test?<DOCS_VERSION_PIN>#return
    markdownEnumDescriptions:
      - | # state
          _Actual state only_

          > Indicates that the resource returns only the instance's actual state as a JSON blob.
      - | # stateAndDiff
          _Actual state and differing properties_

          > Indicates that the resource returns the instance's actual state and an array of
          > property names that are out of the desired state.

examples:
  - executable: registry
    args:
      - config
      - test
    input:  stdin
    return: state

defaultSnippets: # VS Code only
  - label: ' Define without arguments'
    markdownDescription: |
      Define the `test` command for the resource when no arguments are required.
    body:
      input:      ${1|input,env|}
      return:     ${2|state,stateAndDiff|}
      executable: ${3:executable_name}

  - label: ' Define with arguments'
    markdownDescription: |
      Define the `test` command for the resource when at least one argument is required.
    body:
      input:      ${1|input,env|}
      return:     ${2|state,stateAndDiff|}
      executable: ${3:executable_name}
      args:
        - ${4:--first-argument}
