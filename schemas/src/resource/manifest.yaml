# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/resource/manifest.yaml

title: Command-based DSC Resource Manifest
description: >-
  Defines the information DSC and integrating require to process and call a command-based DSC
  Resource.
markdownDescription: | # VS Code only
  ***
  [_Online Documentation_][01]
  ***

  Defines the information DSC and integrating require to process and call a command-based DSC
  Resource. For DSC to use a manifest on a system, the manifest file must:

  1. Be discoverable in the `PATH` environment variable.
  1. Follow the naming convention `<name>.dsc.resource.json`.
  1. Be valid for this schema.

  [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>

type: object
required:
  - manifestVersion
  - type
  - version
  - get
properties:
  manifestVersion:
    title: Manifest Version
    description: >-
      The semver of the DSC Resource manifest schema to validate this manifest with.
    $ref: /<PREFIX>/<VERSION>/definitions/semver.yaml
    enums:
      - '1.0'
    # VS Code Only
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      The semver of the DSC Resource manifest schema to validate this manifest with.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>#manifestversion
    markdownEnumDescriptions:
      - | # 1.0
          _Initial release_
  type:
    $ref: /<PREFIX>/<VERSION>/definitions/resourceType.yaml
  version:
    title: Resource Semantic Version
    description: >-
      The semantic version (semver) of the DSC Resource. This version identifies the DSC Resource,
      not the version of the application it manages.
    $ref: /<PREFIX>/<VERSION>/definitions/semver.yaml
    markdownDescription: | # VS Code only
      ***
      [_Online Documentation_][01]
      ***

      The semantic version ([semver][02]) of the DSC Resource. This version identifies the DSC
      Resource, not the version of the application it manages.

      This value uses the [suggested regular expression][03] to validate whether the string is valid
      semver. This is the same pattern, made multi-line for easier readability:

      ```regex
      ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)
      (?:-(
        (?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)
        (?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))
      *))?
      (?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
      ```

      The first line matches the `major.minor.patch` components of the version. The middle lines match
      the pre-release components. The last line matches the build metadata component.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>#version
      [02]: https://semver.org/
      [03]: https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
  description:
    title: Resource Description
    description: >-
      A short synopsis of the DSC Resource's purpose.
    type: string
    markdownDescription: | # VS Code only
      ***
      [_Online Documentation_][01]
      ***

      Defines a short synopsis of the DSC Resource's purpose.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>#description-1
  tags:
    title: Tags
    description: >-
      Defines a list of searchable terms for the resource.
    markdownDescription: | # VS Code only
      ***
      [_Online Documentation_][01]
      ***

      Defines a list of searchable terms for the resource.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>#tags
    type: array
    uniqueItems: true
    items:
      type: string
      pattern: ^\w+$
      patternErrorMessage: | # VS Code only
        Invalid tag. Tags must be a string of alphanumeric characters and underscores. No other
        characters are permitted.
  get:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.get.yaml
  export:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.export.yaml
  set:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.set.yaml
  test:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.test.yaml
  validate:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.validate.yaml
  provider:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.provider.yaml
  exitCodes:
    # This setting in the root of the schema implies exit codes must have the
    # same meaning across all executions. What about implementations that
    # support multiple executables? Should exitCodes be a key that exists on
    # command/method objects too?
    title: Exit Codes
    description: >-
      This property defines a map of valid exit codes for the DSC Resource. DSC always interprets
      exit code `0` as a successful operation and any other exit code as an error. Use this
      property to indicate human-readable semantic meanings for the DSC Resource's exit codes.
    type: object
    propertyNames:
      pattern: "^[0-9]+$"
      patternErrorMessage: |
        Invalid exit code. Must be a string representing an integer greater than or equal to `0`.
    patternProperties:
      "^[0-9]+$":
        type: string
    unevaluatedProperties: false
    default:
      '0': Success
      '1': Error
    examples:
      - '0': Success
        '1': Invalid parameter
        '2': Invalid input
        '3': Registry error
        '4': JSON serialization failed
    # VS Code only
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      This property defines a map of valid exit codes for the DSC Resource. DSC always interprets
      exit code `0` as a successful operation and any other exit code as an error. Use this
      property to indicate human-readable semantic meanings for the DSC Resource's exit codes.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/root?<DOCS_VERSION_PIN>#exitcodes
  schema:
    $ref: /<PREFIX>/<VERSION>/resource/manifest.schema.yaml
