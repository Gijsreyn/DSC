# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
$schema: https://json-schema.org/draft/2020-12/schema
$id:     <HOST>/<PREFIX>/<VERSION>/resource/manifest.delete.yaml

title: Delete method
description: >-
  Defines how DSC must call the DSC Resource to delete an instance. Define this method for
  resources as an alternative to handling the `_exist` property in a `set` operation, which can
  lead to highly complex code. If the `set` operation for the resource is able to handle deleting
  an instance when `_exist` is `false`, set the `handlesExist` property of the set method
  definition to `true` instead.

markdownDescription: | # VS Code only
  ***
  [_Online Documentation_][01]
  ***

  Defines how DSC must call the DSC Resource to delete an instance. Define this method for
  resources as an alternative to handling the [`_exist`][02] property in a `set` operation, which
  can lead to highly complex code. If the `set` method for the resource is able to handle deleting
  an instance when `_exist` is `false`, set the [`handlesExist`][03] property of the set method
  definition to `true` instead.

  [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/delete?<DOCS_VERSION_PIN>
  [02]: <DOCS_BASE_URL>/reference/schemas/resource/properties/exist?<DOCS_VERSION_PIN>
  [03]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/set?<DOCS_VERSION_PIN>#handlesExist

type: object
required:
  - executable
  - input
properties:
  executable:
    $ref: /<PREFIX>/<VERSION>/definitions/commandExecutable.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines the name of the command to run. The value must be the name of a command discoverable
      in the system's `PATH` environment variable or the full path to the command. A file extension
      is only required when the command isn't recognizable by the operating system as an
      executable.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/delete?<DOCS_VERSION_PIN>#executable
  args:
    $ref: /<PREFIX>/<VERSION>/definitions/commandArgs.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines an array of strings to pass as arguments to the command. DSC passes the arguments to
      the command in the order they're specified.

      For example, the given the following definition:

      ```json
      {
        "executable": "registry",
        "args":       ["config", "delete"]
      }
      ```

      DSC invokes the command for the resource as:

      ```bash
      registry config delete
      ```

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/delete?<DOCS_VERSION_PIN>#args
  input:
    $ref: /<PREFIX>/<VERSION>/definitions/inputKind.yaml
    markdownDescription: |
      ***
      [_Online Documentation_][01]
      ***

      Defines how DSC should pass input to the command, either as environment variables or JSON
      over `stdin`.

      [01]: <DOCS_BASE_URL>/reference/schemas/resource/manifest/delete?<DOCS_VERSION_PIN>#input

examples:
  - executable: registry
    args:
      - config
      - delete
      - --input
      - '{json}'
    input:
      arg: '{json}'

defaultSnippets: # VS Code only
  - label: ' Define without arguments'
    markdownDescription: |
      Define the `validate` command for the resource when no arguments are required.
    body:
      executable: ${1:executable_name}
      input: ${2:stdin}

  - label: ' Define with arguments'
    markdownDescription: |
      Define the `validate` command for the resource when at least one argument is required.
    body:
      executable: ${1:executable_name}
      args:
        - ${2:--first-argument}
      input: ${3:stdin}
