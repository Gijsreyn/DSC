use std::collections::HashMap;
use std::io::Error;

use super::*;

pub enum KeywordType {
    NameValue(String),
    MatchValue(match_data::Match)
}
pub struct ConfigContainer {
    pub keyword: String,
    pub args: KeywordType,
    pub is_default: bool,
    // pub is_for_windows: bool
}
pub struct ConfigData {
    config_lookup: HashMap<String, ConfigContainer>
}

impl ConfigData {
    pub fn new() -> Self {
        let mut config_lookup = HashMap::new();
        // import const_keywords mod & use VALID_KEYWORDS to initialize?
        Self {
            config_lookup,
        }
    }

    fn update(&mut self, keyword: &String, args: KeywordType) {

    }

    pub fn import_json(&self, data: &String) {

    }

    pub fn import_sshd_config(&self, data: &String) {

    }

    pub fn export_json(&self, filter: Option<ConfigData>) -> String {
        "".to_string()
    }

    pub fn export_sshd_config(&self) -> String {
        "".to_string()
    }

    pub fn validate_config(&self) -> (bool, Option<ConfigData>) {
        // call sshd -T for validation
        (false, None)
    }

    pub fn apply_config(&self) {
        // needs to restart sshd
    }

    fn backup_file(&self) {
        // check if backup file already exists
        // only backup if needed
        // fail otherwise
    }

    fn file_check(&self) {
        // check if sshd config file was generated by tool
        // if it was, compare hash and file contents
    }

    fn compare(&self, config: ConfigData) -> ConfigData {
        ConfigData::new()
    }


}

impl Default for ConfigData {
    fn default() -> Self {
        ConfigData::new()
    }
}
pub trait Invoke {
    fn get(&self) -> Result<(), Error>; 
    fn set(&self) -> Result<(), Error>;
    fn test(&self) -> Result<(), Error>;
}

impl Invoke for ConfigData {
    fn get(&self) -> Result<(), Error> {
        Ok(())
    }
    fn set(&self) -> Result<(), Error> {
        Ok(())
    }
    fn test(&self) -> Result<(), Error> {
        Ok(())
    }
}

struct WindowsSSHD {

}

struct LinuxSSHD {

}

trait RestartSSHD {

}

impl RestartSSHD for WindowsSSHD {

}

impl RestartSSHD for LinuxSSHD {

}

