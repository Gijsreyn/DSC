use serde::{Deserialize, Serialize};

use crate::config::match_config::MatchContainer;

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum EnsureKind {
    Present,
    Absent,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub enum YesNo {
    #[serde(rename = "yes")]
    Yes,
    #[serde(rename = "no")]
    No,
}

#[derive(Debug, Default, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct RepeatKeyword {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "_ensure")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ensure: Option<EnsureKind>,
}

// single value, boolean, repeat, match
#[derive(Debug, Clone, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct SshdConfig {
    #[serde(rename = "acceptenv")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accept_env: Option<String>,
    #[serde(rename = "addressfamily")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub address_family: Option<String>,
    #[serde(rename = "allowagentforwarding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allow_agent_forwarding: Option<String>,
    #[serde(rename = "allowgroups")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allow_groups: Option<String>,
    #[serde(rename = "allowstreamlocalforwarding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allow_stream_local_forwarding: Option<String>,
    #[serde(rename = "allowtcpforwarding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allow_tcp_forwarding: Option<String>,
    #[serde(rename = "allowusers")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub allow_users: Option<String>,
    #[serde(rename = "authenticationmethods")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authentication_methods: Option<String>,
    #[serde(rename = "authorizedkeyscommand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_keys_command: Option<String>,
    #[serde(rename = "authorizedkeyscommand_user")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_keys_command_user: Option<String>,
    #[serde(rename = "authorizedkeysfile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_keys_file: Option<String>,
    #[serde(rename = "authorizeprincipalscommand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_principals_command: Option<String>,
    #[serde(rename = "authorizedprincipalscommanduser")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_principals_command_user: Option<String>,
    #[serde(rename = "authorizedprincipalsfile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_principals_file: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub banner: Option<String>,
    #[serde(rename = "casignaturealgorithms")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ca_signature_algorithms: Option<String>,
    #[serde(rename = "challengeresponseauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub challenge_response_authentication: Option<String>,
    #[serde(rename = "channeltimeout")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub channel_timeout: Option<String>,
    #[serde(rename = "chrootdirectory")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub chroot_directory: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ciphers: Option<String>,
    #[serde(rename = "clientalivecountmax")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub client_alive_count_max: Option<String>,
    #[serde(rename = "clientaliveinterval")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub client_alive_interval: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    #[serde(rename = "denygroups")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deny_groups: Option<String>,
    #[serde(rename = "denyusers")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub deny_users: Option<String>,
    #[serde(rename = "disableforwarding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub disable_forwarding: Option<String>,
    #[serde(rename = "dsaauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dsa_authentication: Option<String>,
    #[serde(rename = "exposeauthinfo")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub expose_auth_info: Option<String>,
    #[serde(rename = "fingerprinthash")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fingerprint_hash: Option<String>,
    #[serde(rename = "forcecommand")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub force_command: Option<String>,
    #[serde(rename = "gatewayports")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gateway_ports: Option<String>,
    #[serde(rename = "gssapiauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gss_authentication: Option<String>,
    #[serde(rename = "gssapicleanupcreds")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gss_cleanup_creds: Option<String>,
    #[serde(rename = "gssapistrictacceptor")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub gss_strict_acceptor: Option<String>,
    #[serde(rename = "hostbasedacceptedalgorithms")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hostbased_accepted_algorithms: Option<String>,
    #[serde(rename = "hostbasedacceptedkeytypes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hostbased_accepted_key_types: Option<String>,
    #[serde(rename = "hostbasedauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hostbased_authentication: Option<String>,
    #[serde(rename = "hostbasedusesnamefrompacketonly")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hostbased_uses_name_from_packet_only: Option<String>,
    #[serde(rename = "hostcertificate")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub host_certificate: Option<String>,
    #[serde(rename = "hostkey")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub host_key_file: Option<String>,
    #[serde(rename = "hostdakey")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub host_dsa_key_file: Option<String>,
    #[serde(rename = "hostkeyagent")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub host_key_agent: Option<String>,
    #[serde(rename = "hostkeyalgorithms")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub host_key_algorithms: Option<String>,
    #[serde(rename = "ignorerhosts")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ignore_rhosts: Option<String>,
    #[serde(rename = "ignoreuserknownhosts")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ignore_user_known_hosts: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub include: Option<String>,
    #[serde(rename = "ipqos")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ipq_o_s: Option<String>,
    #[serde(rename = "kbdinteractiveauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kbd_interactive_authentication: Option<String>,
    #[serde(rename = "kerberosauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kerberos_authentication: Option<String>,
    #[serde(rename = "kerberosgetafstoken")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kerberos_get_afs_token: Option<String>,
    #[serde(rename = "kerberosorlocalpasswd")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kerberos_or_local_passwd: Option<String>,
    #[serde(rename = "kerberosticketcleanup")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kerberos_ticket_cleanup: Option<String>,
    #[serde(rename = "kexalgorithms")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub kex_algorithms: Option<String>,
    #[serde(rename = "listenaddress")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub listen_address: Option<String>,
    #[serde(rename = "logingracetime")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub login_grace_time: Option<String>,
    #[serde(rename = "loglevel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub log_level: Option<String>,
    #[serde(rename = "logverbose")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub log_verbose: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub macs: Option<String>,
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub _match: Option<Vec<MatchContainer>>,
    #[serde(rename = "maxauthtries")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_auth_tries: Option<String>,
    #[serde(rename = "maxsessions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_sessions: Option<String>,
    #[serde(rename = "maxstartups")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_startups: Option<String>,
    #[serde(rename = "modulifile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub moduli_file: Option<String>,
    #[serde(rename = "passwordauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password_authentication: Option<YesNo>,
    #[serde(rename = "permitemptypasswords")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub empty_passwd: Option<String>,
    #[serde(rename = "permitlisten")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_listen: Option<String>,
    #[serde(rename = "permitopen")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_open: Option<String>,
    #[serde(rename = "permitrootlogin")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_root_login: Option<String>,
    #[serde(rename = "permittty")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_tty: Option<String>,
    #[serde(rename = "permittunnel")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_tunnel: Option<String>,
    #[serde(rename = "permituserenvironment")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_user_environment: Option<String>,
    #[serde(rename = "permituserrc")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub permit_user_rc: Option<String>,
    #[serde(rename = "persourcemaxstartups")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub per_source_max_startups: Option<String>,
    #[serde(rename = "persourcenetblocksize")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub per_source_net_block_size: Option<String>,
    #[serde(rename = "pidfile")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pid_file: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub port: Option<Vec<RepeatKeyword>>,
    #[serde(rename = "printlastlog")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub print_last_log: Option<String>,
    #[serde(rename = "printmotd")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub print_motd: Option<String>,
    #[serde(rename = "pubkeyacceptedalgorithms")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkey_accepted_algorithms: Option<String>,
    #[serde(rename = "pubkeyacceptedkeytypes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkey_accepted_key_types: Option<String>,
    #[serde(rename = "pubkeyauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkey_authentication: Option<String>,
    #[serde(rename = "pubkeyauthoptions")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pubkey_auth_options: Option<String>,
    #[serde(rename = "rdomain")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub r_domain: Option<String>,
    #[serde(rename = "rekeylimit")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub rekey_limit: Option<String>,
    #[serde(rename = "requiredrsasize")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub required_rsa_size: Option<String>,
    #[serde(rename = "revokedkeys")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revoked_keys: Option<String>,
    #[serde(rename = "securitykeyprovider")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub security_key_provider: Option<String>,
    #[serde(rename = "setenv")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub set_env: Option<String>,
    #[serde(rename = "skeyauthentication")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub skey_authentication: Option<String>,
    #[serde(rename = "streamlocalbindmask")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stream_local_bind_mask: Option<String>,
    #[serde(rename = "streamlocalbindunlink")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub stream_local_bind_unlink: Option<String>,
    #[serde(rename = "strictmodes")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strict_modes: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subsystem: Option<Vec<RepeatKeyword>>,
    #[serde(rename = "syslogfacility")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub log_facility: Option<String>,
    #[serde(rename = "tcpkeepalive")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tcp_keep_alive: Option<String>,
    #[serde(rename = "trustedusercakeys")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub trusted_user_ca_keys: Option<String>,
    #[serde(rename = "unusedconnectiontimeout")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub unused_connection_timeout: Option<String>,
    #[serde(rename = "usedns")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub use_dns: Option<String>,
    #[serde(rename = "versionaddendum")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version_addendum: Option<String>,
    #[serde(rename = "x11displayoffset")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x11_display_offset: Option<String>,
    #[serde(rename = "x11forwarding")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x11_forwarding: Option<String>,
    #[serde(rename = "x11uselocalhost")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x11_use_localhost: Option<String>,
    #[serde(rename = "xauthlocation")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub x_auth_location: Option<String>,
    #[serde(rename = "_purge")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub purge: Option<bool>, 
    #[serde(rename = "_defaults")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub defaults: Option<Box<SshdConfig>>
}

impl SshdConfig {
    pub fn to_json(&self) -> String {
        match serde_json::to_string(self) {
            Ok(json) => json,
            Err(e) => {
                eprintln!("Failed to serialize to JSON: {}", e);
                String::new()
            }
        }
    }
}

